
1.
在编程语境中，渲染（Rendering）通常指的是将数据或内容转换为可视化的形式。
这个过程可以是将文本、图像、图形等数据转换为屏幕上的像素，或者是将数据转换为其他形式的输出（如PDF、图片等）。
渲染的核心是将抽象的数据结构转换为用户可以直观理解的形式。

类比1：印刷机
渲染就像印刷机将文字和图像印刷到纸张上。数据（如Markdown文本）是“墨水”，而Canvas或屏幕是“纸张”。渲染过程就是将墨水按照一定的规则和样式印刷到纸张上。

类比2：电影放映
渲染就像电影放映机将胶片上的图像投射到银幕上。数据（如Markdown文本）是“胶片”，而Canvas或屏幕是“银幕”。渲染过程就是将胶片上的内容投射到银幕上，形成观众可以看到的画面。

实例：
网页渲染：浏览器将HTML、CSS和JavaScript代码转换为用户看到的网页。
游戏渲染：游戏引擎将3D模型、纹理、光照等数据转换为屏幕上的图像。
Markdown渲染：将Markdown文本解析为富文本结构，并在Canvas上绘制成可视化的内容。


2.
三层架构：
a) 底层工具类 (CanvasRenderUtils)
提供了文本测量缓存机制，减少重复的measureText调用
实现了精确的文本换行算法，正确处理Unicode字符和自动换行
添加了异步渲染队列，避免长时间阻塞主线程
提供了内容高度计算，支持动态调整Canvas尺寸

b) Markdown渲染层 (MarkdownRenderer)
专注于Markdown节点的渲染逻辑
实现了各种Markdown元素的渲染（标题、段落、列表等）
支持样式定制，可以针对不同模板提供不同样式
采用批量绘制策略，减少Canvas API调用次数

c) 模板渲染层 (preview.ts)
定义了多种视觉模板（默认、简约、书籍、对话）
管理Canvas生命周期和状态
处理用户交互和导出逻辑
通过风格系统支持模板的一致性