2025.2.28



## 反思

以以下文本为例，将用户粘贴markdown格式的文字，转换成富文本图片。最小化实现的思路是什么？微信小程序的情景下。

目前的思路是：Index页面中，由文本框接收，存储用户的输入，传输到image页面中，由generate image函数生成相应图片。

存在的痛点是：解析时的换行逻辑不够精细，常导致错误换行；Canvas尺寸计算不够准确，最后甚至只能展示出左半侧的字……

这让我怀疑现在是否存在表面兜圈子，而没有绕过现象看本质。




## DeepSeek  SWOT批判性分析

优势（Strengths）
1. 精准需求捕捉：抓住AI内容爆发期的核心痛点（富文本分享困难），提供轻量化解决方案，用户场景明确。  
2. 微信生态适配性：天然契合社交分享场景，用户无需跳转其他平台，符合"用完即走"的微信用户习惯。  
3. 技术实现轻量化：基于现有成熟库（markdown-it + canvas），开发成本可控，快速响应需求。  
4. 窄赛道专注性：聚焦AI内容分享场景，避免与通用Markdown工具直接竞争，形成差异化定位。  

价值验证：★★★☆  
- 痛点解决有效，但需验证用户是否愿意为此多一步操作（需持续用户反馈）。  
- 目前功能为"工具属性"，用户粘性依赖场景频率，需拓展价值链条（如社交传播加成）。  

赛道验证：★★★★  
- 窄而垂直：AI内容分享是新兴细分场景，竞品较少，但需警惕大厂功能内嵌（如微信原生支持Markdown渲染）。  
- 天花板可见：依赖AI平台用户规模，需快速绑定头部AI平台形成生态合作。  

        




## 对标 - 文图APP - 版本记录

简介
近期,中国的某人工智能网站爆火,由于回答内容非常高质量,所以形成了用户喜欢将回答分享至社交网络的需求,
但是截图太麻烦,生成的内容又是富文本格式,所以本应用可以将用户在该人工智能网站上的提问和答案转换成长图,
或者切成3:4的小图,更加方便分享到社交网络。


2025年2月21
新增对富文本内容的转换，
并且可以支持复制粘贴到不支持markdown格式的编辑器或者笔记软件中,比如备忘录、WPS等


1、优化转纯文本的展示效果
2、优化iPad上的按钮布局


1、支持表格渲染
2、答案编辑区增加了全屏编辑按钮
3、新增将markdown转换成纯文本并支持复制的功能


增加了文本输入容量


1、优化了粘贴体验
2、优化了转换成图片按钮的点击逻辑


优化了水印显示,不再显示默认水印,提升了用户体验


1、新增主页内容清空功能
2、新增小红书切片问题页面字体放大功能
3、优化了表格(只能简化,由于图片宽度限制,无法完全显示标准表格)
4、取消了原本图片上的“问题”,“回答”字样

2025年1月30











## JK Create

今天的AI编程像极了当年的短视频风口。
我越发觉得cursor这类AI编程工具的出现，改变了原有的生态逻辑，当下独立开发App，
最重要的就是：对核心功能进行快速验证。用Cursor编程直接先干核心功能，核心创意就行，细节在一开始不要去管太多。
        
原因如下：
1、核心功能要是没起，其它细节都是浪费时间
2、核心功能如果火起来，用户会为你提供更明确的需求，再慢慢迭代就是。就像我开发的文图app，从第一次到第五次更新，都是被用户推着走。
3、开发难度会小很多，也降低了开发周期，更利于产品被实现。尤其对于弱基础的，一上来搞太难，战线拉太久，放弃的概率会变得特别大
        
虽然自从AI编程爆火以来，一直有一种批评的声音：会出现大量粗制滥造的作品。
        
这有点像什么呢，短视频刚出来的时候，被很多专业人士看不起，但现在又是不一样的业态。
倒不是说它能改变原来的内容生态结构，就像电影还是电影的样子，但一定会增加很多新的东西，诞生很多新的机会。我觉得cursor的出现，有异曲同工之处。
        

