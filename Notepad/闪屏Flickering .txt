闪屏(Flickering)

现象在前端开发中很常见，尤其在Canvas渲染中更为明显。
闪屏问题是由于Canvas渲染过程中同步操作阻塞主线程以及缺乏双缓冲机制导致的。

这主要是由以下几个因素导致的：
同步渲染阻塞: Canvas的渲染操作是同步的，当处理大量计算时会阻塞主线程，导致UI不响应。
频繁重绘: 当数据变化触发多次重绘时，可能导致视觉上的闪烁。
渲染时机不合理: 在DOM未完全准备好或资源未加载完成时进行渲染。
双缓冲缺失: 没有使用离屏Canvas进行预渲染，直接在可见Canvas上绘制。


用户体验问题
这种闪屏现象暗示了几个严重问题：
性能问题: 渲染过程占用了过多CPU资源
架构问题: 渲染逻辑与UI逻辑耦合过深
状态管理混乱: 可能存在多个状态变化同时触发渲染
用户信任损失: 界面不稳定会让用户质疑应用质量


优化方案

双缓冲渲染:
使用离屏Canvas先完成所有渲染
渲染完成后一次性将结果绘制到显示Canvas上

异步渲染:
将渲染任务分解为小块
使用requestAnimationFrame在合适的时机执行渲染

添加加载状态:
渲染期间显示加载动画
提供进度反馈减轻用户等待焦虑

渲染节流:
控制渲染频率，避免短时间内多次重绘
合并多个渲染任务

使用Web Worker:
将复杂计算移至后台线程
保持UI线程响应性

